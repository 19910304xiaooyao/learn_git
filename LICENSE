 这是一个LICENSE文本文件。

暂存区index：
index暂存区：标记了你当前工作目录中，哪些内容是被git管理的。
index暂存区：是干净的，工作区有修改。

1.修改已经放在了暂存区
	$ git reset HEAD readme.txt
	记得如何丢弃工作区的修改吗?
	$ git checkout -- readme.txt
2.修改之在工作区
	记得如何丢弃工作区的修改吗?
	$ git checkout -- readme.txt

小结：
又到了小结时间。

场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。


checkout(1):从本地库中恢复
命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。	
checkout(2):也可以切换分支
git rm -- file
git commit -m "rm file"



创建分支dev并切换到dev分支
git branch -b dev
相当于:
git branch dev
git checkout dev

分支小结：
Git鼓励大量使用分支：
查看分支：git branch
创建分支：git branch name
切换分支：git checkout name
创建+切换分支：git checkout -b name
合并某分支到当前分支：git merge name
删除分支：git branch -d name

当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
用git log --graph命令可以看到分支合并图。
Git分支十分强大，在团队开发中应该充分应用。
合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。

修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。
